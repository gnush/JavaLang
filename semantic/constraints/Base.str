module Base

imports
    include/JavaLang
    semantic/unification/Main

signature constructors
    CEq : Type * Type * String -> Constraint
    // CSubClass : Type * Type * String -> Constraint
    // CSubIFace : Type * Type * String -> Constraint
    CWidenablePrim : Type * Type * String -> Constraint // primitive type widening is possible (commutative)
    CWidenablePrimString : Type * Type * String -> Constraint // primitive type widening is possible (commutative) or first type is string
    CWidenedEq : Type * Type * Type * String -> Constraint // t1 must be equal to the widening of t1 and t2
    CSortOf : Type * List(Type) * STRING -> Constraint           // lhs Type must be one of rhs Types
    
    // failure constraints
    CMultiDeclaration : STRING * List(Type) -> Constraint // x is bound to various types in the same scope. (this is an error even if all types are equal)
    CSelfDeclaration : STRING -> Constraint // variable x is initialized using itself. (int x = x) 
    
    MetaTypeVar : String -> Type
    // PrimTypeVar : String -> Type                        // primitive type var
    RefTypeVar : String -> Type                         // reference type var
    NullType : Type // is this needed?

    Unit : Type

    //DeclLocal : STRING * Type -> Declaration
rules
    /**
     * Provides an empty result set for constraint generation.
     *
     *        constraints, binding-requirements, binding-declarations, current class, classes, mgu, errornous constraints
     * @type (List(Constraint), List(Binding), List(Classnames), List((STRING, Type)), List(Constraints))
     */
    empty-result = !([], [], [], [], [], [], [])
    
    /**
     * Provides a list with primitive Types
     */
    primitive-types = ![Byte(), Short(), Int(), Long(), Char(), Float(), Double(), Boolean()]
    numerical-types = ![Byte(), Short(), Int(), Long(), Char(), Float(), Double()]
    integral-types = ![Byte(), Short(), Int(), Long(), Char()]
    float-types = ![Float(), Double()]
    numerical-operator-return-types = ![Int(), Long(), Float(), Double()]
    
    /**
     * Type for string literals (without methods)
     */
    string-type = !ClassOrInterfaceType(
				    TypeName(
				      PackageOrTypeName(PackageOrTypeName(Id("java")), Id("lang"))
				    , Id("String")
				    )
				  , None()
				  )
    
    /**
     * Merges multiple result sets
     *
     * @param List of result sets to be merged
     * @param List of new constraints
     * 
     * @type (List(result-set), List(Constraint)) -> result-set 
     */
    merge-result-sets: (results, newConstraints) -> cRes
        where binding-reqs  := <filter-binding-requirements; flatten-list; merge-binding-requirements> results;
              binding-decls := <filter-binding-declarations; flatten-list> results;
              constraints   := <concat> [newConstraints,
                                         <filter-constraints; flatten-list> results,
                                         <filter-binding-requirements; mk-isectCallList; map(isectConstraints); flatten-list> results];
              errors        := <filter-errors; flatten-list> results;
              (constraints', errors', mgu) := <solve-constraints> constraints;
              cRes          := <update-mgu> (
                                <update-errors> (
                                 <update-binding-declarations> (
                                  <update-binding-requirements> (
                                   <update-constraints> (
                                    <empty-result>, constraints'), binding-reqs), binding-decls), <conc> (errors, errors')), mgu)

    merge-result-sets(local-var-decl-switch): (results, newConstraints) -> cRes
	    where binding-reqs0  := <filter-binding-requirements; flatten-list; merge-binding-requirements> results;
	          binding-decls0 := <filter-binding-declarations; flatten-list> results; // TODO: remove multi bound variables to avoid the generation of duplicate constraints (preserve on of them)
	         (binding-reqs, binding-decls) :=
	               <if local-var-decl-switch
	                   // remove bindings
	                   then !(<remove-bound-requirements> (binding-decls0, binding-reqs0),
	                          []) //<remove-local-declarations> binding-decls0)
	                   // do not remove bindings
	                   else !(binding-reqs0, binding-decls0) 
	                end>;
              constraints    := <concat> [newConstraints,
                                          <filter-constraints; flatten-list> results,
                                          <if local-var-decl-switch
                                              then <conc> (<conc; mk-isectCallList; map(isectConstraints); flatten-list> (<filter-binding-requirements> results, <filter-binding-declarations> results),
                                                           <mk-double-declaration-constraints> binding-decls0)
                                              else !<filter-binding-requirements; mk-isectCallList; map(isectConstraints); flatten-list> results
                                           end>]; //<mk-binding-declaration-constraints> (binding-reqs, binding-decls)];
              errors         := <filter-errors; flatten-list> results;
              (constraints', errors', mgu) := <solve-constraints> constraints;
              cRes           := <update-mgu> (
                                 <update-errors> (
                                  <update-binding-declarations> (
                                   <update-binding-requirements> (
                                    <update-constraints> (
                                     <empty-result>, constraints'), binding-reqs), binding-decls), <conc> (errors, errors')), mgu)

    /**
     * Merges multiple result sets
     *
     * @param List of result sets to be merged
     * @param List of new constraints
     * @param New binding
     * 
     * @type (List(result-set), List(Constraint), binding) -> result-set 
     */
    // TODO: change me like on of your french codes
    // merge-result-sets(unify): (results, newConstraints, (x, t)) -> (constraints, bindings, [], [], errors)
    //     where newRes      := <update-binding-requirements> (<empty-result>, [(x, t)]);
    //           results'    := [newRes|results]; 
    //     	  bindings    := <filter-binding-requirements; flatten-list; merge-binding-requirements; remove-all(?(x, _))> results';
    //           constraints := <concat> [newConstraints,
    //                                    <filter-constraints; flatten-list> results',
    //                                    <filter-binding-requirements; mk-isectCallList; map(isectConstraints); flatten-list> results'];
    //           errors      := <filter-errors; flatten-list> results'

    /**
     * Merges multiple result sets
     *
     * @param List of result sets to be merged
     * @param List of new constraints
     * @param List of new bindings
     * 
     * @type (List(result-set), List(Constraint), List(binding)) -> result-set 
     */              
    // merge-result-sets: (results, newConstraints, newVars) -> cRes
    //     where binding-reqs   := <filter-binding-requirements; flatten-list; merge-binding-requirements> results;
    //           binding-reqs' := <remove-bound> (newVars, binding-reqs);
    //           constraints    := <concat> [newConstraints,
    //                                       <filter-constraints; flatten-list> results,
    //                                       <filter-binding-requirements; mk-isectCallList; map(isectConstraints); flatten-list> results];
    //           errors         := <filter-errors; flatten-list> results;
    //           cRes           := <update-errors> (<update-binding-requirements> (<update-constraints> (<empty-result>, constraints), binding-reqs'), errors)

    merge-result-sets = debug(!"merge-result-sets: "); fail
    merge-result-sets(param) = debug(!"merge-result-sets(param): "); fail
    
    /**
     * Removes all bindings from bs whose variable is in bound. 
     *
     * @param List of new bound variables
     * @param List of bindings
     */
    remove-bound: (bound, bs) -> <foldr(![], \ ((x, t), xs) -> <if !(x, bound); elem
                                                                    then !xs
                                                                    else ![(x, t)|xs] end> \)> bs

    /**
     * Removes all binding-requirements that are introduces as binding-declarations.
     * (Mostly a copy of remove-bound)
     *
     * @param List of binding declarations
     * @param List of binding requirements
     */
    // TODO: make use of constructors
    // remove-bound-requirements: (decls, reqs) -> <foldr(![], \ (DeclLocal(x, t), xs) -> <if !(x, decl-vars); elem
    //                                                                                         then !xs
    //                                                                                         else ![DeclLocal(x, t)|xs]
    //                                                                                     end> \)> reqs
    remove-bound-requirements: (decls, reqs) -> <foldr(![], \ ((x, t), xs) -> <if !(x, decl-vars); elem
                                                                                            then !xs
                                                                                            else ![(x, t)|xs]
                                                                                        end> \)> reqs
        where decl-vars := <map(Fst)> decls
    remove-bound-requirements = debug(!"remove-bound-requirements"); fail

    /**
     * Removes all local declarations.
     *
     * @param List of binding declarations
     */
    // remove-local-declarations: (decls) -> <filter(not(?DeclLocal(_, _)))> decls
    remove-local-declarations: (decls) -> <filter(not(?(_, _)))> decls

//     // list, list -> resultSet
//     mergeUnify: (c, cs) -> (constraints', bindings', mgu, errs)
//         where bindings    := <filter-bindings; flatten-list; bUnion> c;
//               constraints := <conc> (cs, <filter-bindings; mk-isectCallList; map(isectConstraints); flatten-list> c);
//               errors      := <filter-errs; flatten-list> c;
//               (constraints', mgu, errs) := <unify'> (constraints, [], [], errors); // (constraints, [], <filter-mgu; flatten-list> c, [])
//               bindings'   := <map(\ (x, t) -> (x, <app_mgu> (t, mgu)) \)> bindings
// 
//     // list, list, (var, type) -> resultSet
//     mergeUnify: (c, cs, (x, t)) -> (constraints', bindings'', mgu, errs)
//         where cNew := ([], [(x, t)], [], []);
//               c'   := [cNew|c];
//               bindings    := <filter-bindings; flatten-list; bUnion> c';
//               bindings'   := <remove-all(?(x, _))> bindings;
//               constraints := <conc> (cs, <filter-bindings; mk-isectCallList; map(isectConstraints); flatten-list> c');
//               errors      := <filter-errs; flatten-list> c';
//               (constraints', mgu, errs) := <unify'> (constraints, [], [], errors);
//               bindings''  := <map(\ (x, t) -> (x, <app_mgu> (t, mgu)) \)> bindings'
//               
//     mergeUnify = debug(!"mergeUnify: "); fail
    
    merge-binding-requirements: [] -> []
    merge-binding-requirements: [(x, t)|bs] -> [(x, t)|<merge-binding-requirements> bs']
        where bs' := <filter(not(?(x, _)))> bs
    merge-binding-requirements = debug(!"merge-binding-requirements: "); fail

    test-double-decl = !(<test-double-decl0>, <test-double-decl1>)
    // test-decl0 = ![DeclLocal("x", Int()), DeclLocal("y", Int()), DeclLocal("b0", Boolean()), DeclLocal("b1", Boolean())]; mk-binding-declaration-constraints
    // test-decl1 = ![DeclLocal("x", Int()), DeclLocal("y", Int()), DeclLocal("x", Boolean()), DeclLocal("x", Int())]; mk-binding-declaration-constraints 
    test-double-decl0 = ![("x", Int()), ("y", Int()), ("b0", Boolean()), ("b1", Boolean())]; mk-double-declaration-constraints
    test-double-decl1 = ![("x", Int()), ("y", Int()), ("x", Boolean()), ("x", Int())]; mk-double-declaration-constraints

    mk-double-declaration-constraints: [] -> []
    // mk-double-declaration-constraints: [DeclLocal(x, t)|bs] -> <conc> (c, <mk-double-declaration-constraints> bs')
    //     where types := <filter(?DeclLocal(x, _); Snd)> bs;
    //           bs'   := <filter(not(?DeclLocal(x, _)))> bs;
    //           c     := <if equal(|types, [])
    //                         then ![] else
    //                              ![CMultiDeclaration(x, [t|types])] end> 
    mk-double-declaration-constraints: [(x, t)|bs] -> <conc> (c, <mk-double-declaration-constraints> bs')
        where types := <filter(?(x, _); Snd)> bs;
              bs'   := <filter(not(?(x, _)))> bs;
              c     := <if equal(|types, [])
                            then ![] else
                                 ![CMultiDeclaration(x, [t|types])] end>
    mk-double-declaration-constraints = debug(!"mk-double-declaration-constraints"); fail 
    
    /** forall x in list. (elem, x) */
    mk-tuples: (elem, list) -> <map(\ x -> (elem, x) \)> list
    
    /** list of bindings -> list of tuples of bindings */
    mk-isectCallList: [] -> []
    mk-isectCallList: [x|xs] -> <conc> (<mk-tuples> (x, xs), <mk-isectCallList> xs)
    
    /** list of bindings, list of bindings -> list of constraints */
    // TODO: prettier error message
    isectConstraints: ([], ys) -> []
    isectConstraints: ([(x, t)|xs], ys) -> <union> (c, <isectConstraints> (xs, ys))
        where c := <filter(?(x, _) ; \ (_, t') -> CEq(t, t', <conc-strings> ("variable binding of ", <write-to-string> x)) \)> ys
    isectConstraints = debug(!"isectConstraints: "); fail

    constraints:          (cs,  _,    _,   _,    _,    _,   _) -> cs
    binding-requirements: ( _, bs,    _,   _,    _,    _,   _) -> bs
    binding-declarations: ( _,  _, dcls,   _,    _,    _,   _) -> dcls
    mgu:                  ( _,  _,    _, mgu,    _,    _,   _) -> mgu
    errors:               ( _,  _,    _,   _, errs,    _,   _) -> errs
    current-class:        ( _,  _,    _,   _,    _, crnt,   _) -> crnt
    classes:              ( _,  _,    _,   _,    _,    _, cls) -> cls

    filter-constraints = map(constraints)
    filter-binding-requirements = map(binding-requirements)
    filter-binding-declarations = map(binding-declarations)
    filter-mgu = map(mgu)
    filter-errors = map(errors)
    filter-current-classes = map(current-class)
    filter-classes = map(classes)
    
    update-constraints:          (( _, bs, dcls, mgu, errs, crnt, cls), cs)     -> (cs, bs, dcls, mgu, errs, crnt, cls)
    update-binding-requirements: ((cs,  _, dcls, mgu, errs, crnt, cls), bs)     -> (cs, bs, dcls, mgu, errs, crnt, cls)
    update-binding-declarations: ((cs, bs,    _, mgu, errs, crnt, cls), dcls)   -> (cs, bs, dcls, mgu, errs, crnt, cls)
    update-mgu:                  ((cs, bs, dcls,   _, errs, crnt, cls), mgu)    -> (cs, bs, dcls, mgu, errs, crnt, cls)
    update-errors:               ((cs, bs, dcls, mgu,    _, crnt, cls), errs)   -> (cs, bs, dcls, mgu, errs, crnt, cls)
    update-current-class:        ((cs, bs, dcls, mgu, errs,    _, cls), crnt)   -> (cs, bs, dcls, mgu, errs, crnt, cls)
    update-classes:              ((cs, bs, dcls, mgu, errs, crnt,   _), cls)    -> (cs, bs, dcls, mgu, errs, crnt, cls)
    
    add-constraint:          ((cs, bs, dcls, mgu, errs, crnt, cls), constraint)  -> ([constraint|cs], bs, dcls, mgu, errs, crnt, cls)
    add-binding-requirement: ((cs, bs, dcls, mgu, errs, crnt, cls), binding)     -> (cs, [binding|bs], dcls, mgu, errs, crnt, cls)
    add-binding-declaration: ((cs, bs, dcls, mgu, errs, crnt, cls), declaration) -> (cs, bs, [declaration|dcls], mgu, errs, crnt, cls)
    add-error:               ((cs, bs, dcls, mgu, errs, crnt, cls), error)       -> (cs, bs, dcls, mgu, [error|errs], crnt, cls)
    
    add-constraints: (res, constraints) -> <update-constraints> (res, <conc> (constraints, cs)) 
        where cs := <constraints> res