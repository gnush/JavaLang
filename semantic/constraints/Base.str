module Base

imports
    include/JavaLang

signature constructors
    CEq : Type * Type * String -> Constraint
    // CSubClass : Type * Type * String -> Constraint
    // CSubIFace : Type * Type * String -> Constraint
    CWidenablePrim : Type * Type * String -> Constraint // primitive type widening is possible (commutative)
    CWidenablePrimString : Type * Type * String -> Constraint // primitive type widening is possible (commutative) or first type is string
    CWidenedEq : Type * Type * Type * String -> Constraint // t1 must be equal to the widening of t1 and t2
    CSortOf : Type * List(Type) * STRING -> Constraint           // lhs Type must be one of rhs Types
    
    MetaTypeVar : String -> Type
    PrimTypeVar : String -> Type                        // primitive type var
    RefTypeVar : String -> Type                         // reference type var
    NullType : Type // is this needed?

    Unit : Type
    UnitLocVar : List(Id) -> Type
    UnitVarDec : Id -> Type

rules
    /**
     * Provides an empty result set for constraint generation.
     *
     *        constraints, bindings for variables, bindings for classes, mgu, errornous constraints
     * @type (List(Constraint), List(Binding), List(Classnames), List((STRING, Type)), List(Constraints))
     */
    empty-result = !([], [], [], [], [])
    
    /**
     * Provides a list with primitive Types
     */
    primitive-types = ![Byte(), Short(), Int(), Long(), Char(), Float(), Double(), Boolean()]
    numerical-types = ![Byte(), Short(), Int(), Long(), Char(), Float(), Double()]
    integral-types = ![Byte(), Short(), Int(), Long(), Char()]
    float-types = ![Float(), Double()]
    numerical-operator-return-types = ![Int(), Long(), Float(), Double()]
    
    /**
     * Type for string literals (without methods)
     */
    string-type = !ClassOrInterfaceType(
				    TypeName(
				      PackageOrTypeName(PackageOrTypeName(Id("java")), Id("lang"))
				    , Id("String")
				    )
				  , None()
				  )
    
    /**
     * Determines whether a given type is a primitive type or not.
     */
    is-primitive-type: t -> <elem> (t, <primitive-types>)
    is-numerical-type: t -> <elem> (t, <numerical-types>)
    is-integral-type: t -> <elem> (t, <integral-types>)
    is-float-type: t -> <elem> (t, <float-types>)
    
    // widen primitive types (A Formal Type System for Java, Fig. 14)
    // TODO: what about chars?
    widen-prim: (t, t) -> <id>  // TODO: t must be a type
    widen-prim: (Byte(), Short()) -> <id>
    widen-prim: (Byte(), Int()) -> <id>
    widen-prim: (Byte(), Long()) -> <id>
    widen-prim: (Byte(), Float()) -> <id>
    widen-prim: (Byte(), Double()) -> <id>
    widen-prim: (Short(), Int()) -> <id>
    widen-prim: (Short(), Long()) -> <id>
    widen-prim: (Short(), Float()) -> <id>
    widen-prim: (Short(), Double()) -> <id>
    widen-prim: (Int(), Long()) -> <id>
    widen-prim: (Int(), Float()) -> <id>
    widen-prim: (Int(), Double()) -> <id>
    widen-prim: (Long(), Float()) -> <id>
    widen-prim: (Long(), Double()) -> <id>
    widen-prim: (Float(), Double()) -> <id>
    
    test-string = !(Int(), Long()); widen-prim-string
    
    // t must be a primitive type
    widen-prim-string: (t, t') -> <if <widen-prim> (t, t')
                                    then id
                                    else string-type; ?t; id
                                   end>
    
    /**
     * Merges multiple result sets
     *
     * @param List of result sets to be merged
     * @param List of new constraints
     * 
     * @type (List(result-set), List(Constraint)) -> result-set 
     */
    merge-result-sets: (results, newConstraints) -> cRes
        where bindings    := <filter-binding-requirements; flatten-list; merge-bindings> results;
              constraints := <concat> [newConstraints,
                                       <filter-constraints; flatten-list> results,
                                       <filter-binding-requirements; mk-isectCallList; map(isectConstraints); flatten-list> results];
              errors      := <filter-errors; flatten-list> results;
              cRes        := <update-errors> (<update-binding-requirements> (<update-constraints> (<empty-result>, constraints), bindings), errors)

    /**
     * Merges multiple result sets
     *
     * @param List of result sets to be merged
     * @param List of new constraints
     * @param New binding
     * 
     * @type (List(result-set), List(Constraint), binding) -> result-set 
     */
    // TODO: change me like on of your french codes
    merge-result-sets(unify): (results, newConstraints, (x, t)) -> (constraints, bindings, [], [], errors)
        where newRes      := <update-binding-requirements> (<empty-result>, [(x, t)]);
              results'    := [newRes|results]; 
        	  bindings    := <filter-binding-requirements; flatten-list; merge-bindings; remove-all(?(x, _))> results';
              constraints := <concat> [newConstraints,
                                       <filter-constraints; flatten-list> results',
                                       <filter-binding-requirements; mk-isectCallList; map(isectConstraints); flatten-list> results'];
              errors      := <filter-errors; flatten-list> results'

    /**
     * Merges multiple result sets
     *
     * @param List of result sets to be merged
     * @param List of new constraints
     * @param List of new bindings
     * 
     * @type (List(result-set), List(Constraint), List(binding)) -> result-set 
     */              
    merge-result-sets: (results, newConstraints, newVars) -> cRes
        where bindings    := <filter-binding-requirements; flatten-list; merge-bindings> results;
              bindings'   := <remove-bound> (newVars, bindings);
              constraints := <concat> [newConstraints,
                                       <filter-constraints; flatten-list> results,
                                       <filter-binding-requirements; mk-isectCallList; map(isectConstraints); flatten-list> results];
              errors      := <filter-errors; flatten-list> results;
              cRes        := <update-errors> (<update-binding-requirements> (<update-constraints> (<empty-result>, constraints), bindings'), errors)

    merge-result-sets = debug(!"merge-result-sets: "); fail
    
    /**
     * Removes all bindings from bs whose variable is in bound. 
     *
     * @param List of new bound variables
     * @param List of bindings
     */
    remove-bound: (bound, bs) -> <foldr(![], \ ((x, t), xs) -> <if !(x, bound); elem
                                                                    then !xs
                                                                    else ![(x, t)|xs] end> \)> bs

//     // list, list -> resultSet
//     mergeUnify: (c, cs) -> (constraints', bindings', mgu, errs)
//         where bindings    := <filter-bindings; flatten-list; bUnion> c;
//               constraints := <conc> (cs, <filter-bindings; mk-isectCallList; map(isectConstraints); flatten-list> c);
//               errors      := <filter-errs; flatten-list> c;
//               (constraints', mgu, errs) := <unify'> (constraints, [], [], errors); // (constraints, [], <filter-mgu; flatten-list> c, [])
//               bindings'   := <map(\ (x, t) -> (x, <app_mgu> (t, mgu)) \)> bindings
// 
//     // list, list, (var, type) -> resultSet
//     mergeUnify: (c, cs, (x, t)) -> (constraints', bindings'', mgu, errs)
//         where cNew := ([], [(x, t)], [], []);
//               c'   := [cNew|c];
//               bindings    := <filter-bindings; flatten-list; bUnion> c';
//               bindings'   := <remove-all(?(x, _))> bindings;
//               constraints := <conc> (cs, <filter-bindings; mk-isectCallList; map(isectConstraints); flatten-list> c');
//               errors      := <filter-errs; flatten-list> c';
//               (constraints', mgu, errs) := <unify'> (constraints, [], [], errors);
//               bindings''  := <map(\ (x, t) -> (x, <app_mgu> (t, mgu)) \)> bindings'
//               
//     mergeUnify = debug(!"mergeUnify: "); fail
    
    merge-bindings: [] -> []
    merge-bindings: [(x, t)|bs] -> [(x, t)|<merge-bindings> bs']
        where bs' := <filter(not(?(x, _)))> bs
    merge-bindings = debug(!"bUnion: "); fail
    
    /** forall x in list. (elem, x) */
    mk-tuples: (elem, list) -> <map(\ x -> (elem, x) \)> list
    
    /** list of bindings -> list of tuples of bindings */
    mk-isectCallList: [] -> []
    mk-isectCallList: [x|xs] -> <conc> (<mk-tuples> (x, xs), <mk-isectCallList> xs)
    
    /** list of bindings, list of bindings -> list of constraints */
    // TODO: prettier error message
    isectConstraints: ([], ys) -> []
    isectConstraints: ([(x, t)|xs], ys) -> <union> (c, <isectConstraints> (xs, ys))
        where c := <filter(?(x, _) ; \ (_, t') -> CEq(t, t', <conc-strings> ("variable binding of ", <write-to-string> x)) \)> ys
    isectConstraints = debug(!"isectConstraints: "); fail

    constraints: (cs,  _,   _,   _,    _) -> cs
    binding-requirements:    (_,  bs,   _,   _,    _) -> bs
    binding-declarations:     (_,   _, cls,   _,    _) -> cls
    mgu:         (_,   _,   _, mgu,    _) -> mgu
    errors:      (_,   _,   _,   _, errs) -> errs

    filter-constraints = map(constraints)
    filter-binding-requirements = map(binding-requirements)
    filter-binding-declarations = map(binding-declarations)
    filter-mgu = map(mgu)
    filter-errors = map(errors)
    
    update-constraints:          (( _, bs, cls, mgu, errs), cs)   -> (cs, bs, cls, mgu, errs)
    update-binding-requirements: ((cs,  _, cls, mgu, errs), bs)   -> (cs, bs, cls, mgu, errs)
    update-binding-declarations: ((cs, bs,   _, mgu, errs), cls)  -> (cs, bs, cls, mgu, errs)
    update-mgu:                  ((cs, bs, cls,   _, errs), mgu)  -> (cs, bs, cls, mgu, errs)
    update-errors:               ((cs, bs, cls, mgu,    _), errs) -> (cs, bs, cls, mgu, errs)
    
    add-constraint:          ((cs, bs, cls, mgu, errs), constraint) -> ([constraint|cs], bs, cls, mgu, errs)
    add-binding-requirement: ((cs, bs, cls, mgu, errs), binding)    -> (cs, [binding|bs], cls, mgu, errs)
    add-binding-declaration: ((cs, bs, cls, mgu, errs), class)      -> (cs, bs, [class|cls], mgu, errs)
    add-error:               ((cs, bs, cls, mgu, errs), error)      -> (cs, bs, cls, mgu, [error|errs])