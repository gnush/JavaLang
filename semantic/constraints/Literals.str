module constraints/Literals

imports
    include/JavaLang
    semantic/constraints/Base

rules
    generate-constraints: Lit((t, c)) -> (t, c)
    
    generate-constraints: Deci(s) -> (<type-of-int-literal> s, <empty-result>)
    generate-constraints: Hexa(s) -> (<type-of-int-literal> s, <empty-result>)
    generate-constraints: Octa(s) -> (<type-of-int-literal> s, <empty-result>)
    generate-constraints: Float(s) -> (<type-of-float-literal> s, <empty-result>)
    generate-constraints: Bool(l)  -> (Boolean(), <empty-result>)
    generate-constraints: Char(l) -> (Char(), <empty-result>)
    generate-constraints: Null() -> (RefTypeVar(<newname> ("RefType")), <empty-result>)
    
    generate-constraints: String(l) -> (<string-type>, <empty-result>) // TODO: String Object -> Reference Type
    
    /**
     * Determines the type of an String, assuming it comes from an IntLiteral.
     *
     * @type STRING -> Type
     */
    type-of-int-literal = if or(string-ends-with(|"l"), string-ends-with(|"L"))
                            then !Long()
                            else !Int()
                          end
    
    /**
     * Determines the type of an String, assuming it comes from an FloatLiteral.
     *
     * @type STRING -> Type
     */
    type-of-float-literal = if or(string-ends-with(|"f"), string-ends-with(|"F"))
                            then !Float()
                            else !Double() //string ends with d, D or without a char
                          end