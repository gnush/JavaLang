module Methods

imports
    include/JavaLang
    semantic/constraints/Base
    semantic/unification/Substitution

rules
    generate-constraints: Invoke((t, c), arglist) -> (tRes, cRes)
        where node := "method invokation";
              tTmp := MetaTypeVar(<newname> "T");
              cs   := []; // TODO:  first argument (the method) must support number and types of arguments
              cRes := <empty-result>;
              tRes := <apply-mgu> (tTmp, <mgu> cRes)
              
    generate-constraints: Method(x) -> (tRes, cRes)
        where node := "method"; // TODO: declaration?
              tTmp := MetaTypeVar(<newname> "T");
              cs   := []; // TODO: ???
              cRes := <empty-result>;
              tRes := <apply-mgu> (tTmp, <mgu> cRes)

    // not supporting typeargs (generics)
    generate-constraints: Method((t, c), typeArgs, methodName) -> (tRes, cRes)
        where node := "method"; // TODO: declaration?
              tTmp := MetaTypeVar(<newname> "T");
              cs   := []; // TODO: first argument (the object) must have a method with methodName
              cRes := <empty-result>;
              tRes := <apply-mgu> (tTmp, <mgu> cRes)

    //generate-constraints: SuperMethod(typeArgs, methodName) -> <fail>
    //generate-constraints: QSuperMethod(t, typeArgs, methodName) -> <fail>
    //generate-constraints: GenericMethod() -> <fail>