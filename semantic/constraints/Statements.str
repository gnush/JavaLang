module constraints/Statements

imports
    include/JavaLang
    semantic/constraints/Base

// TODO
// - Optional syntax parameters like in return    
// - variable declaration/block statements
//    -  Bug: i; int i; is not detectet. (it is when some other statement is between (i; j; int i;))
// - Handle abrubt completion

rules
    generate-constraints: Empty() -> (Unit(), <empty-result>)
    generate-constraints: ExprStm((t, cRes)) -> (Unit(), cRes)
    
    generate-constraints: If((tCond, cCond), (tBody, cBody)) -> (Unit(), cRes)
        where node := "If/2";
              cs   := [CEq(tCond, Boolean(), node)];
              cRes := <merge-result-sets> ([cCond, cBody], cs)
    
    // TODO: constraints for tThen, tElse. equal, Unit?
    generate-constraints: If((tCond, cCond), (tThen, cThen), (tElse, cElse)) -> (Unit(), cRes)
        where node := "If/3";
              cs   := [CEq(tCond, Boolean(), node)];
              cRes := <merge-result-sets> ([cCond, cThen, cElse], cs)
    
    generate-constraints: Block(results) -> (Unit(), cRes)
        where node := "Block";
              cs   := <map(Snd); filter-binding-declarations; flatten-list; mk-double-declaration-constraints> results;
              cTmp := <merge-block-stm> <map(Snd); reverse> results;
              cRes := <add-constraints> (cTmp, cs)
    
    merge-block-stm: [] -> <empty-result>
    merge-block-stm: [c] -> <merge-result-sets(id)> ([c], [])
    merge-block-stm: [c1, c2|results] -> <merge-block-stm> [cRes|results]
        where cRes := <merge-result-sets(id)> ([c1, c2], [])
    merge-block-stm = debug(!"merge-block-stm: "); fail
    
    generate-constraints: LocalVarDecStm((tRes, cRes)) -> (Unit(), cRes)

    generate-constraints: LocalVarDec(listAnnoOrVarMod, t, listVarDecRes) -> (t, cRes)
        where node      := "LocalVarDec";
              declTypes := <map(Fst)> listVarDecRes; 
              cs        := <map(\ type -> CEq(t, type, node) \)> declTypes;
              sets      := <map(Snd)> listVarDecRes;
              cRes      := <merge-result-sets(false)> (sets, cs)

    generate-constraints: VarDec(x) -> (tRes, cRes)
        where tRes := MetaTypeVar(<newname> "T");
              cRes := <add-binding-declaration> (<empty-result>, (x, tRes))

    generate-constraints: VarDec(x, (t, c)) -> (t, cRes)
        where cs   := <mk-self-declaration-constraints> (x, c);
              cRes := <add-constraints> (<add-binding-declaration> (c, (x, t)), cs)

    mk-self-declaration-constraints: (x, res) -> <if equal(|<length> (vars), 0)
                                                    then ![]
                                                    else ![CSelfDeclaration(x)]
                                                  end>
        where vars := <binding-requirements; filter(?(x, _))> res

    generate-constraints: While((tExpr, cExpr), (tStm, cStm)) -> (tRes, cRes)
        where node := "While";
              cs   := [CEq(tExpr, Boolean(), node)];
              tRes := Unit();
              cRes := <merge-result-sets> ([cExpr, cStm], cs)

    generate-constraints: DoWhile((tStm, cStm), (tExpr, cExpr)) -> (tRes, cRes)
        where node := "DoWhile";
              cs   := [CEq(tExpr, Boolean(), node)];
              tRes := Unit();
              cRes := <merge-result-sets> ([cExpr, cStm], cs)
    
    generate-constraints: For((tVar, cVar), Some((tExpr, cExpr)), updateExprs, (tStm, cStm)) -> (tRes, cRes)
        where node := "BasicFor";
              cs   := [CEq(tExpr, Boolean(), node)];
              tRes := Unit();
              cRes := <merge-result-sets(id)> ([cVar, cExpr, cStm|<map(Snd)> updateExprs], cs)
    
    // TODO: ???
    generate-constraints: For(exprs1, expr, exprs2, stm) -> <fail>
    
    // expr is iterable or array type
    generate-constraints: ForEach(formalParam, expr, stm) -> <fail>
    
    generate-constraints: Labeled(label, stm) -> <fail>
    generate-constraints: AssertStm(expr) -> <fail>
    generate-constraints: AssertStm(expr1, expr2) -> <fail>
    generate-constraints: Switch(expr, stm) -> <fail>  
    generate-constraints: SwitchBlock(listSwitchGroup, listSwitchLabel) -> <fail>
    generate-constraints: SwitchGroup(switchLabel, blockStm) -> <fail>
    generate-constraints: Case(expr) -> <fail> // SwitchLabel
    generate-constraints: Default() -> <fail> // SwitchLabel
    // generate-constraints: Break() -> <fail>
    generate-constraints: Break(label) -> <fail> 
    // generate-constraints: Continue() -> <fail>
    generate-constraints: Continue(label) -> <fail>
    // generate-constraints: Return() -> <fail>
    generate-constraints: Return(expr) -> <fail>
    generate-constraints: Throw(expr) -> <fail>
    generate-constraints: Synchronized(expr, blockStm) -> <fail>
    generate-constraints: Try(block, catch) -> <fail>
    generate-constraints: Try(block, listCatch, finallyBlock) -> <fail>
    generate-constraints: Catch(formalParam, block) -> <fail>
    generate-constraints: ClassDecStm(classDec) -> <fail>