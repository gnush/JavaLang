module constraints/Names

imports
    include/JavaLang
    semantic/constraints/Base

// TODO
// - distinguish names for expressions, methods, ...
// - generate result sets for names, needed when occuring on the RHS

rules
    generate-constraints: Id(x) -> x
    generate-constraints: AmbName(x) -> [x]
    generate-constraints: AmbName(x, y) -> <conc> (x, [y])
    
    // local var or field
    generate-constraints: ExprName(x) -> (tRes, cRes)
        where tRes := MetaTypeVar(<newname> "T");
              cRes := <add-binding-requirement> (<empty-result>, (x, tRes))

    generate-constraints: ExprName(path, x) -> (tRes, cRes)
        where tRes      := MetaTypeVar(<newname> "T");
              (bs, cls) := <mk-classpath-bindings> (path, x, tRes);
              cRes      := <update-classes> (<update-binding-requirements> (<empty-result>, bs), cls)

    mk-classpath-bindings: ([classname], field, tField) -> (bindings, [classReq])
        where tClass   := MetaTypeVar(<newname> "T");
              bindings := [(classname, tClass), (field, tField)];
              classReq := ClassHasField(tClass, field, tField)
    
    mk-classpath-bindings: ([package, classOrPackage|rst], field, tField) -> <fail>
        where tPackage := MetaTypeVar(<newname> "T");
              tClassOr := MetaTypeVar(<newname> "T")
              

    // generate-constraints: ExprName(x, y) -> (tRes, cRes)
    //     where tRes := MetaTypeVar(<newname> "T");
    //           cRes := <add-binding-requirement> (<empty-result>, (<conc> (x, y), tRes))

    // generate-constraints: MethodName(x) -> [x]
    // generate-constraints: MethodName(x, y) -> <conc> (x, [y])
    // generate-constraints: TypeName(x) -> [x]
    // generate-constraints: TypeName(x, y) -> <conc> (x, [y])
    // generate-constraints: PackageOrTypeName(x) -> [x]
    // generate-constraints: PackageOrTypeName(x, y) -> <conc> (x, [y])