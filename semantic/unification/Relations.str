module Relations

imports
    include/JavaLang
    semantic/constraints/Base

rules
    /**
     * Determines whether a given type is a primitive type or not.
     */
    is-primitive-type: t -> <elem> (t, <primitive-types>)
    is-numerical-type: t -> <elem> (t, <numerical-types>)
    is-integral-type: t -> <elem> (t, <integral-types>)
    is-float-type: t -> <elem> (t, <float-types>)
    
    // widen primitive types (A Formal Type System for Java, Fig. 14)
    // TODO: what about chars?
    widen-prim: (t, t) -> <id>  // TODO: t must be a type
    widen-prim: (Byte(), Short()) -> <id>
    widen-prim: (Byte(), Int()) -> <id>
    widen-prim: (Byte(), Long()) -> <id>
    widen-prim: (Byte(), Float()) -> <id>
    widen-prim: (Byte(), Double()) -> <id>
    widen-prim: (Short(), Int()) -> <id>
    widen-prim: (Short(), Long()) -> <id>
    widen-prim: (Short(), Float()) -> <id>
    widen-prim: (Short(), Double()) -> <id>
    widen-prim: (Int(), Long()) -> <id>
    widen-prim: (Int(), Float()) -> <id>
    widen-prim: (Int(), Double()) -> <id>
    widen-prim: (Long(), Float()) -> <id>
    widen-prim: (Long(), Double()) -> <id>
    widen-prim: (Float(), Double()) -> <id>
    
    test-string = !(Int(), Long()); widen-prim-string
    
    // t must be a primitive type
    widen-prim-string: (t, t') -> <if <widen-prim> (t, t')
                                    then id
                                    else string-type; ?t; id
                                   end>

    /**
     * If x occurs in the term true, else false.
     */
    occurs: (x, Boolean()) -> <fail>
    occurs: (x, Byte()) -> <fail>
    occurs: (x, Short()) -> <fail>
    occurs: (x, Int()) -> <fail>
    occurs: (x, Long()) -> <fail>
    occurs: (x, Float()) -> <fail>
    occurs: (x, Double()) -> <fail>
    occurs: (x, Char()) -> <fail>
    occurs: (x, ClassOrInterfaceType(_, _)) -> <fail>
    occurs: (x, ClassType(_, _)) -> <fail>
    occurs: (x, InterfaceType(_, _)) -> <fail>
    occurs: (x, ArrayType(t)) -> <occurs> (x, t)
    occurs: (x, MetaTypeVar(x)) -> <id>
    occurs: (x, MetaTypeVar(x)) -> <fail>
    //occurs = debug(!"occurs check: "); fail
    
    /**
     * Checks wheter a constraint contains some typevars as arguments.
     */
    constraint-contains-typevars: c#(args) -> <if not(equal(|<length> typevars, 0))
                                        then id
                                        else fail
                                    end>
        where typevars := <filter(\ c1#(_) -> <equal> (c1, "MetaTypeVar") \)> args

    /**
     * Checks wheter a type is a typevar or contains some.
     */
    contains-typevars: Boolean() -> <fail>
    contains-typevars: Byte() -> <fail>
    contains-typevars: Short() -> <fail>
    contains-typevars: Int() -> <fail>
    contains-typevars: Long() -> <fail>
    contains-typevars: Float() -> <fail>
    contains-typevars: Double() -> <fail>
    contains-typevars: Char() -> <fail>
    contains-typevars: ClassOrInterfaceType(_, _) -> <fail>
    contains-typevars: ClassType(_, _) -> <fail>
    contains-typevars: InterfaceType(_, _) -> <fail>
    contains-typevars: ArrayType(t) -> <contains-typevars> t
    contains-typevars: MetaTypeVar(_) -> <id> 